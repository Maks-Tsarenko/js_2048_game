{"version":3,"sources":["scripts/cell.js","scripts/grid.js","scripts/tile.js","scripts/main.js"],"names":["Cell","gridElement","x","y","cell","document","createElement","classList","add","append","tile","setXY","linkedTile","linkedTileForMerge","newTile","isEmpty","hasTileForMerge","value","setValue","removeFromDom","unlinkTileForMerge","getValue","GRID_SIZE","CELLS_COUNT","Grid","cells","i","push","Math","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","emptyCells","filter","random","length","reduce","groupedCells","Tile","tileElement","style","setProperty","textContent","remove","gameField","getElementById","grid","score","button","querySelector","scoreElement","startGame","setupNewGame","innerHTML","removeEventListener","addEventListener","forEach","unlinkTile","getRandomEmptyCell","linkTile","setupInputOnce","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","handleInput","e","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","slideTiles","slideTilesInGroup","group","j","cellWithTail","targetCell","canAccept","linkTileForMerge","mergeTiles","window","once","canMove","some","canMoveInGroup","index"],"mappings":"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","file":"main.3ffebd82.js","sourceRoot":"..\\src","sourcesContent":["export class Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty() || (!this.hasTileForMerge()\n      && this.linkedTile.value === newTile.value);\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value\n      + this.linkedTileForMerge.value);\n    this.linkedTileForMerge.removeFromDom();\n    this.unlinkTileForMerge();\n  }\n\n  getValue() {\n    return this.linkedTile?.getValue() || 0;\n  }\n}\n","import { Cell } from './cell';\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport class Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn\n      .map(column => [...column].reverse());\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow\n      .map(row => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n","export class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.5 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = this.value;\n    this.tileElement.classList.add(`tile--${value}`);\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  removeFromDom() {\n    this.tileElement.remove();\n  }\n}\n","import { Grid } from './grid';\nimport { Tile } from './tile';\n\nconst gameField = document.getElementById('game-field');\n\nconst grid = new Grid(gameField);\n\nlet score = 0;\nconst button = document.querySelector('.button');\nconst scoreElement = document.querySelector('.game-score');\n\nbutton.addEventListener('click', startGame);\n\nfunction startGame() {\n  setupNewGame();\n\n  document.querySelector('.message-start').classList.add('hidden');\n  button.classList.remove('start');\n  button.innerHTML = 'Restart';\n  button.classList.add('restart');\n\n  button.removeEventListener('click', startGame);\n  button.addEventListener('click', setupNewGame);\n}\n\nfunction setupNewGame() {\n  grid.cells.forEach(cell => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeFromDom();\n      cell.unlinkTile();\n    }\n  });\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n\n  setupInputOnce();\n\n  score = 0;\n  scoreElement.innerHTML = score;\n\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n}\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case ARROW_UP:\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveUp();\n      break;\n\n    case ARROW_DOWN:\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveDown();\n      break;\n\n    case ARROW_LEFT:\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveLeft();\n      break;\n\n    case ARROW_RIGHT:\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameField);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n\n  setupInputOnce();\n}\n\nfunction moveUp() {\n  slideTiles(grid.cellsGroupedByColumn);\n}\n\nfunction moveDown() {\n  slideTiles(grid.cellsGroupedByReversedColumn);\n}\n\nfunction moveLeft() {\n  slideTiles(grid.cellsGroupedByRow);\n}\n\nfunction moveRight() {\n  slideTiles(grid.cellsGroupedByReversedRow);\n}\n\nfunction slideTilesInGroup(group) {\n  for (let i = 0; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTail = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTail.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    targetCell.isEmpty()\n      ? targetCell.linkTile(cellWithTail.linkedTile)\n      : targetCell.linkTileForMerge(cellWithTail.linkedTile);\n\n    cellWithTail.unlinkTile();\n  }\n}\n\nfunction slideTiles(groupedCells) {\n  groupedCells.forEach(group => slideTilesInGroup(group));\n\n  grid.cells.forEach(cell => {\n    if (cell.hasTileForMerge()) {\n      cell.mergeTiles();\n      score += cell.getValue();\n      scoreElement.innerHTML = score;\n    }\n\n    if (cell.getValue() === 2048) {\n      document.querySelector('.message-win').classList.remove('hidden');\n      window.removeEventListener('keydown');\n    }\n  });\n}\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n};\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0 || cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n"]}